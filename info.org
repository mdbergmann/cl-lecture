#+AUTHOR: Manfred Bergmann
#+TITLE: Common Lisp - oldie but goldie
#+OPTIONS: |:t \n:t

* Intro
  This article should be a brief introduction to Common Lisp. Brief, because Common Lisp is a rather large and complex system. It has many features. I will try to concentrate on the basics and some exceptional features that you likely find nowhere else.
  
** How did I come to Common Lisp
   I have been working with various languages and runtimes since the start oif my career 22 years ago.
   Beginning of 2019 I wanted to fin something else to closely look into that is not JVM based (which I'm mostly been working with since close to 20 years starting with Java 1.1).
   For some reason, which I can't recall, I haven't been really introduced to Lisps, ever. I also can't recall why 2019 I thought that I should take a look at Lisps.
   So I took a look at Clojure first. Clojure is a great language but it was again on the JVM. I wanted something native, or at least some other runtime.
   After some excursions to Erlang, Elixir and Lisp Flavoured Erlang I finally found Common Lisp and didn't regret it.
   
** Brief history
   First drafts of Common Lisp appeared 1984. While mostly a successor of Maclisp it tried to
   unify and standardize Maclisp and the various other successors of Maclisp.
   In 1994 Common Lisp was an ANSI standard.
   
** Age advantages
   Since then the standard hasn't changed. That can of course be seen as a bad thing.
   But actually I believe it is a good thing. It is even today surprisingly 'modern' and has many features of todays languages, partially even more features than 'modern' languages.
   Common Lisp is a quite large and complex package. After this long time there are of course some dusty corners. But all in all it is still very attractive and has an active community.
   Because the standard didn't change since 1994 any code written since then should still be compile- and runnable on modern compilers and runtime implementarions, where there are still a few (see below).
   
* Basics
  Let me run through some of the basic features of Common Lisp. Those basic features are likely also available in other languages. Common Lisp also has some unique features that I'll be talking about later.

** TODO Lists
   Since the name 'Lisp' is an abbrevation for List Processing we should have a look at lists. Lists are the corner stone of the Lisp language because every Lisp construct is a list also called s-expression.

   
** Functions
   Functions are nothing special. Every language knows them. They are sometimes also known as subroutines or procedures. There are of course fine grained meaning differences but that should be the talk for some other time.

   A simple function (which does nothing) definition looks like this:

   #+BEGIN_SRC lisp
     (defun my-fun ())
     (my-fun)
   #+END_SRC

   #+RESULTS:
   : NIL

   A function in Common Lisp always returns something, even if not explicitly done. This simple function just returns ~NIL~, which in Common Lisp has two meanings. a) it has a boolean meaning of =false= and b) it means the empty list equal to ~'()~.
   
   Common Lisp provides a very sophisticated set of features to structure function arguments.

*** Mantatory arguments
    Mandatory arguments are simply added to the list construct following the function name. This list construct that represents the arguments is commonly knows as /lambda list/.
    
    #+BEGIN_SRC lisp
      (defun my-fun (arg1 arg2)
        (list arg1 arg2))
      (my-fun "Hello" "World")
    #+END_SRC

    #+RESULTS:
    | Hello | World |
    
*** Optional arguments
    Optional arguments are defined using the ~&optional~ keyword:

    #+BEGIN_SRC lisp
      (defun my-fun (arg1 &optional opt1 (opt2 "buzz" opt2-p))
        (list arg1 opt1 opt2 opt2-p))
      (list
       (my-fun "foo")
       (my-fun "foo" "bar")
       (my-fun "foo" "bar" "my-buzz"))
    #+END_SRC

    #+RESULTS:
    | foo | NIL | buzz    | NIL |
    | foo | bar | buzz    | NIL |
    | foo | bar | my-buzz | T   |

    The first optional =opt1= does not have a default value, so if undefined it'll be ~NIL~. The second optional =opt2= when undefined is populated with the given default value "buzz". The  optional ~opt2-p~ predicate indicates whether the =opt2= parameter has been given or not. Sometimes this is useful in succeeding code.
    
*** Key arguments
    =key= arguments are similar as named arguments in other languages. The ordering of =key= arguments is not important and is not enforced. They are defined with a the ~&key~ keyword:

    #+BEGIN_SRC lisp
      (defun my-fun (&key key1 (key2 "bar" key2-p))
        (list key1 key2 key2-p))
      (list
       (my-fun)
       (my-fun :key1 "foo")
       (my-fun :key1 "foo" :key2 "buzz"))
    #+END_SRC

    #+RESULTS:
    | NIL | Foo  | NIL |
    | Bar | Foo  | NIL |
    | Bar | Buzz | T   |

    =key= arguments are optional. Similarly as ~&optional~ arguments a default value can be configured and a predicate that indicates whether the parameter was provided or not. Defining =key2-p= is optional.

*** Rest arguments
    =rest= arguments are arguments that have not already been captured by mandatory, optional, or key. So they form a rest. This rest is available in the body as a list. Defined by ~rest~ keyword. =rest= arguments are sometimes usefull to pass them on to ~APPLY~ function.

    #+BEGIN_SRC lisp
      (defun my-fun (arg1 &optional opt1 &rest rest)
              (list arg1 opt1 rest))
      (list
       (my-fun "foo" :rest1 "rest1" :key1 "buzz")
       (my-fun "foo" "opt1" :rest1 "rest1" :key1 "buzz"))
    #+END_SRC

    #+RESULTS:
    | foo | :REST1 | (rest1 :KEY1 buzz)        |
    | foo | opt1   | (:REST1 rest1 :KEY1 buzz) |

    
*** Mixing arguments
    As you can see it is possible to mix ~optional~, ~key~ and ~rest~ arguments. However, some care must be taken with mixing =optional= and =key= because the key of the =key= argument could be taken as a the =optional= argument. Similarly with =rest= and =key= arguments as can be seen in the examples above. In most use-cases you'd either have =optional= or =key= together with madatory arguments.
   
** Lambdas
   Lambdas are anonymus functions defined at runtime. Other than that they are similar to =defun=s, regular/named functions. They can be used in place of a function name like this:

   #+BEGIN_SRC lisp
     ((lambda (x) x) "foo")  ;; returns "foo"
   #+END_SRC

   #+RESULTS:
   : foo

   In which case the lambda is immediately evaluated. The function 'is applied' on the value "foo", represented as the argument x. The function then returns x.
   In other cases, i.e. when a lambda is bound to a variable one need to evaluate the lambda using =funcall=:

   #+BEGIN_SRC lisp
     (let ((my-fun (lambda (x) x)))
       (funcall my-fun "foo"))
   #+END_SRC

   #+RESULTS:
   : foo

   This is in contrast to Scheme, or other Lisp-1s, where also =my-fun= can be used in place of the function name and would just be evaluated as a function.
   Common Lisp is a Lisp-2, which means that there are separate environments for variables and functions. In the above example =my-fun= is a variable. In order to evaluate it as a function one one has to use =FUNCALL=.

   Lambdas are first-class objects in Common Lisp which means they can be created at runtime, bound to variables and passed around as function arguments or function results:

   #+BEGIN_SRC lisp
     (defun my-lambda ()
       (lambda (y) y))
     (list (type-of (my-lambda)) 
           (funcall (my-lambda) "bar"))
   #+END_SRC

   #+RESULTS:
   | function | bar |

   The "Lambda-calculus" (Alonzo Church, 1930) is a mathematical formal system based on variables, function abstractions (lambda expressions) and applying those using substitution. This can be used for any kind of computation and is Turing machine equivalent (or can be used to simulate a Turing machine).
   So if one would stack/nest lambda expression in lambda expression in lambda expression and so on, where a lambda expression is bound to a variable and the computation of this again substitutes a variable, you could have such a lambda-calculus.
   This is of course not so practical and hard to read but this alone would be enough to calculate anything that is calculatable.
   
** Macros
  Macros are an essential part in Common Lisp. One should not confuse Lisp macros with C macros which just do textual replacement. Common Lisp macros are extremely powerful.
  In short, macros are constructs that generate and/or manipulate code. Lisp macros still stand out in contrast to other languages because Lisp macros just generate and manipulate ordinary Lisp code where as other languages use an AST (Abstract Syntax Tree) representation of the code and hence the macros must deal with the AST. In Lisp, Lisp is the AST. With this Lisp is homoiconic.

  Macros are not easy to distinguish from functions. In programs one can not see the difference. Many functions could be replaced by macros. But functions can usually not replace macros. There is a fundamental difference between the two.
  The arguments to macros are not immediately evaluated but passed to the macro as data. Whereas parameters to functions are first evaluated and the result passed to the function. For example let's recreate the =when= macro:

  #+BEGIN_SRC lisp
    (defmacro my-when (expr &body body)
      `(if ,expr ,@body))
  #+END_SRC

  #+RESULTS:
  : MY-WHEN

  When using the macro it prints:

  #+BEGIN_SRC
    CL-USER> (my-when (= 1 0)
               (print "Foo"))
    NIL
    CL-USER> (my-when (= 1 1)
               (print "Foo"))
    "Foo"
  #+END_SRC

  The macro expands the =expr= and =body= arguments. Macros always generate just Lisp code, that's why the result of a macro must use a quoted expression. Quoted expressions are not evaluated, they are just plain data (a list), so the macro expression can be replaced with the macro body whereever the macro is used. We can expand the macro to see what it would be replaced with. Let's have a look at this:

  #+BEGIN_SRC
    CL-USER> (macroexpand-1 '(my-when (= 1 1)
                              (print "Foo")))
    (IF (= 1 1) (PRINT "Foo"))
  #+END_SRC

  So we see that =my-when= is replaced with an =if= special form. As we said, a quoted expression is not evaluated, so would we use the =expr= argument in the quoted expression we would just get =(IF EXPR ...)=, but we want to =expr= to be expanded here so that the right =if= form is created with what the user defined as the =if= test expression. The =,= 'escapes' the quoted expression and will expand the following form. =,expr= is thus expanded to =(= 1 1)= and =,@body= to =(print "Foo")=. The =@= is special as it unwraps (splices) a list of expressions. Since the body of a macro can denote many forms they are wrapped into a list for the =&body= argument and hence have to be unwrapped again on expansion. I.e.:

  #+BEGIN_SRC lisp
    (my-when t
      (print "Foo")
      (print "Bar"))
  #+END_SRC

  Here the two print forms represent the body of the macro and are wrapped into a list for the =&body= argument like:

  #+BEGIN_SRC lisp
    ((print "Foo")
     (print "Bar"))
  #+END_SRC

  The =@= will remove the outer list structure.

  *when are macros expanded?*

  Macros are expanded during the 'macro exansion' phase. This phase happens before compilation. So the Lisp compiler already only sees the macro expanded code.
   
** Packages
  Packages are constructs to separate and structure data and code similar as in other languages. =DEFPACKAGE= declares a new package. =IN-PACKAGE= makes the named package the current package. Any function, macro or variable definitions are then first of all local to that package where they are defined in. Function, macro or variable definitions can be exported, which means that they are then visible for/from other packages. A typical example of a package with some definitions would be:

  #+BEGIN_SRC lisp
    (defpackage :foo
      (:use :cl)
      (:import-from #:bar
                    #:bar-fun
                    #:bar-var)
      (:export #:my-fun
               #:my-var))
    (in-package :foo)

    (defparameter my-var "Foovar")
    (defun my-fun () (print "Foofun"))
    (defun my-internal-fun () (print "Internal"))
  #+END_SRC

  A package is kind of a lookup table where function names, variable names, etc., represented as symbols (later more on symbols) refer to an object which represents the function, variable, etc. The function =my-fun= would be refered to using a package qualified name =foo:my-fun1=. The exported 'symbols' are the public interface of the package. Using a double colon one can also refer to internal symbols, like: =foo::my-internal-fun= but that should be done with care.
  It is also possible to import specific package symbols (functions, variables, etc.) by using the =import= or =import-from= functions. Any package added as parameter of =:use= will be inherited by the defined package and so all exported symbols of the packages mentioned at =:use= will be known and can be used without using the package qualified name.
  
** Symbols
  Symbols in Common Lisp are almost everywhere. They represent data and are data themselves. When they represent they represent variables or functions. When used as data we can use them as identifiers or as  something like enums or other things.

  We can create symbols by just saying ='foo= in the REPL. This will create a symbol with the name "FOO". Notice the uppercase. We also create symbols by using the function =INTERN=.
  
  Let's have a look at the structure of symbols. We create a symbol from a string by using the =INTERN= function.

*** Unbound symbols
  
  #+BEGIN_SRC lisp
    (intern "foo")
  #+END_SRC

  #+RESULTS:
  : |foo|

  This symbol =foo= was created in the current package (=*PACKAGE*=). We can have a look at =*PACKAGE*= (in Emacs by just evaluating =*PACKAGE*= and clicking on the result):

  #+BEGIN_SRC
#<PACKAGE #x30004000001D>
--------------------
Name: "COMMON-LISP-USER"
Nick names: "CL-USER"
Use list: CCL, COMMON-LISP
Used by list: 
2 present symbols.
0 external symbols.
2 internal symbols.
1739 inherited symbols.
0 shadowed symbols.
  #+END_SRC

  We'll see that there are 2 internal symbols. One of them is our newly created symbol =foo=. Let's drill further down to the internal symbols.

  #+BEGIN_SRC
#<%PACKAGE-SYMBOLS-CONTAINER #x3020014B3FCD>
--------------------
All internal symbols of package "COMMON-LISP-USER"

A symbol is considered internal of a package if it's
present and not external---that is if the package is
the home package of the symbol, or if the symbol has
been explicitly imported into the package.

Notice that inherited symbols will thus not be listed,
which deliberately deviates from the CLHS glossary
entry of `internal' because it's assumed to be more
useful this way.

  [Group by classification]

Symbols:                Flags:
----------------------- --------
foo                     --------
  #+END_SRC

  So =foo= is listed as symbol. Let's look at =foo= in detail (in Emacs we can click on =foo=).

  #+BEGIN_SRC
#<SYMBOL #x3020012F958E>
--------------------
Its name is: "foo"
It is unbound.
It has no function value.
It is internal to the package: COMMON-LISP-USER [export] [unintern]
Property list: NIL
  #+END_SRC

  Here we see the attributes of symbol =foo=. Symbols can be bound to variables, or they can have a function value (Common Lisp is a Lisp-2, which means it separates variables from function names. In a Lisp-1, like Scheme, one cannot have the same name for a variable and function), in which case they refer to a variable or function. Our symbol is neither, it's just a plain symbol.

  We can get the name of the symbol by:

  #+BEGIN_SRC lisp
    (symbol-name (intern "foo"))
  #+END_SRC

  #+RESULTS:
  : foo

*** Bound symbols
  Whenever we define a variable, or function we bind a symbol to a variable or function. Let's do this:

  #+BEGIN_SRC lisp
    ;; create a variable definition in the current package
    (defvar *X* "foo")
  #+END_SRC

  When we look again in the current package =*package*= we see an additional symbol:

  #+BEGIN_SRC
#<%PACKAGE-SYMBOLS-CONTAINER #x3020014B3FCD>
...
Symbols:                Flags:
----------------------- --------
*X*                     b-------
foo                     --------
  #+END_SRC

  And it is flagged with "b", meaning it is bound, see below.

  #+BEGIN_SRC
#<SYMBOL #x30200145E2EE>
--------------------
Its name is: "*X*"
It is a global variable bound to: "foo" [unbind]
It has no function value.
It is internal to the package: COMMON-LISP-USER [export] [unintern]
Property list: NIL
  #+END_SRC

  The same can be done with functions. Defining a function with =defun= will create a symbol in the current package whose function object is the function. Let's create a function: =(defun foo-fun ())= and look at the symbol:

  #+BEGIN_SRC
#<%PACKAGE-SYMBOLS-CONTAINER #x3020015C0E8D>
--------------------
Symbols:                Flags:
----------------------- --------
FOO-FUN                 -f------

#<SYMBOL #x3020014D1C4E>
--------------------
Its name is: "FOO-FUN"
It is unbound.
It is a function: #<Compiled-function FOO-FUN #x3020014D0A8F> [unbind]
  #+END_SRC

*** The Lisp reader
  When a Lisp file is read, or some input from the REPL, it is first of all just a sequence of characters. What the /reader/ reads it turns into objects, symbols, and stores those (using =INTERN=) into the current package. It also applies some rules for how the character sequence is converted to the symbol name. Usually those rules include turning all characters to uppercase. So i.e. a function name "foo" creates a symbol with the name =FOO=.
  It is possible to have symbol names with literals. We have seen that when we defined the symbol =|foo|= above. The reader puts vertical bars around "foo" which means the symbol name is literally "foo". This is because we have not applied the conversion rules when using =INTERN=. If we had defined the symbol as =(intern "FOO")= we wouldn't see the vertical bars.

  Let's make an example with a function. Say, we are in a package =MY-P= and we define a function:

  #+BEGIN_SRC lisp
    (defun my-fun () "fun")
  #+END_SRC

  #+RESULTS:
  : MY-FUN

  The REPL responds with =MY-FUN=. This is the returned symbol from the function definition that was added to the package. When we now want to execute the function we write: =(my-fun)=. When the reader reads "my-fun", it uses =INTERN= to either create or retrieve the symbol (=INTERN= retrieves the symbol if it already exists). It is retrieved if previously the function was defined with =DEFUN= which also creates a symbol with an attached function object. The attached function object can then be executed.

* Types
  Even though Common Lisp is not statically typed it has types. In fact everything has a type.

** Everything has a type
  And there are no primitives as they are in Java.

  #+BEGIN_SRC lisp
    (defun my-fun ())
    (list
     (type-of 5)
     (type-of "foo")
     (type-of #\a)
     (type-of 'foo)
     (type-of #(1 2 3))
     (type-of '(1 2 3))
     (type-of (cons 1 2))
     (type-of (lambda () "fun"))
     (type-of #'my-fun)
     (type-of (make-condition 'error)))
  #+END_SRC

  #+RESULTS:
  | (INTEGER 0 1152921504606846975) | (SIMPLE-BASE-STRING 3) | STANDARD-CHAR | SYMBOL | (SIMPLE-VECTOR 3) | CONS | CONS | FUNCTION | FUNCTION | ERROR |

** Create new types
  New structure types can be created with =DEFSTRUCT=. =DEFCLASS= will create a new class type.

  #+BEGIN_SRC lisp
    (defstruct address 
      (street "" :type string)
      (streetnumber nil :type integer)
      (plz nil :type integer))
    (type-of (make-address 
              :street "my-street"
              :streetnumber 1
              :plz 51234))
  #+END_SRC

  #+RESULTS:
  : ADDRESS

  The =:type= specified in =DEFSTRUCT= is optional but when provided the type is checked on creating a new structure.
  =DEFCLASS= can be used as replacement of =defstruct=. If you build object-oriented software and want to work with inheritance then use =DEFCLASS=. If also has the feature of updating the class structure at runtime which structures can't do.

  =deftype= allows to create new types as a combination of existing types. Let's create a new type that represents the numbers from 11 to 50.

  #+BEGIN_SRC lisp
    (defun 10-50-number-p (n)
      (and (numberp n)
           (> n 10)
           (<= n 50)))
    (deftype 10-50-number ()
      `(satisfies 10-50-number-p))
  #+END_SRC

  This snipped creates a predicate function that ensures the number argument is within 10 and 50 (excluding 10 and including 50). The type definition then uses =SATISFIES= with the given predicate function to check the type. So we can then say:

  #+BEGIN_SRC lisp
    (list
     (typep 10 '10-50-number)
     (typep 11 '10-50-number)
     (typep 50 '10-50-number)
     (typep 51 '10-50-number))
  #+END_SRC

  #+RESULTS:
  | NIL | T | T | NIL |

** Check for types
  Types can be checked on runtime, or also (partially) on compile time (SBCL has some static type check capability). Checking types usually makes sense for function or macro parameters but can be done anywhere.

*** check-type
  =CHECK-TYPE= is used to do this. It can be used as follows, considering the =10-50-number= type from above:

  #+BEGIN_SRC lisp
    (defun add-10-50-nums (n1 n2)
      (check-type n1 10-50-number)
      (check-type n2 10-50-number)
      (+ n1 n2))
  #+END_SRC

  Do we call this as =(add-10-50-nums 10 11)= we will get a type error raised:

  #+BEGIN_SRC
The value 10 is not of the expected type 10-50-NUMBER.
   [Condition of type TYPE-ERROR]
  #+END_SRC

  Under the hoods =CHECK-TYPE= is a wrapper for =ASSERT= call.

*** declaim
  With =DECLAIM= one can make declarations for variables or functions. Would we want to make the same type check as with =CHECK-TYPE= we'd have to:

  #+BEGIN_SRC lisp
    (declaim (ftype (function (10-50-number 10-50-number) 10-50-number) add-10-50-nums))
    (defun add-10-50-nums (n1 n2)
      (+ n1 n2))
  #+END_SRC

  This declares the input and output types of the function =ADD-10-50-nums=. However, this will not be checked at runtime, and whether it will be checked at compile time depends on the Common Lisp implementation. SBCL will check it, CCL don't, in which case it will be useable as documentation only.

  It's not nicely readable though. The library [[https://github.com/ruricolist/serapeum/blob/master/REFERENCE.md#types][Serapeum]] adds some syntactic sugar to make this more nice. I.e. the =DECLAIM= from above can be written as:

  #+BEGIN_SRC lisp
    (-> add-10-50-nums (10-50-number 10-50-number) 10-50-number)
  #+END_SRC
  
* Error handling
  Common Lisp has some unique error handling properties. The "Restarts". We will see later some examples. For now let's explore the usual stuff that you find in most other languages.

** unwind-protect
  =UNWIND-PROTECT= is similar as a try-finally in other languages, Java for example. It protects the stack from unwinding further by allowing to call a clean-up form.

  #+BEGIN_SRC lisp
    (defun do-stuff ())
    (defun clean-up ())
    
    (unwind-protect
         (do-stuff)  ;; can raises condition
      (clean-up))
  #+END_SRC

  #+RESULTS:
  : NIL

  For the other error hanling mechanisms we need to know what conditions are.
  
** Conditions
  Conditions are objects of a type =condition=. The CLHS says: "an object which represents a situation". So conditions are far more than errors. Any condition/situation can be transported by conditions. Now while a condition itself can represent a situation like an error, there are multiple ways to raise a condition and multiple ways to handle a condition depending on the need. For example: an error condition can be just signaled (using =SIGNAL=) in which case nothing much will happen if the condition is not handled at all. =SIGNAL= will just return =NIL= in that case. However, when an error condition is raised using =ERROR=, then it must be handled, otherwise the runtime will bring up the debugger. There is also =WARN=, which will print a warning message if the condition is not handled.

** Handle error with stack unwind
  =HANDLER-CASE= is a bit more sophisticated than =UNWIND-PROTECT=, it allows to differenciate on the raised condition and do a different handling. This is comparable to a try-catch-finally (i.e. in Java or elsewhere). This is nothing special really, so let's move on to Restarts.

** Restarts / Handle error without stack unwind
  Restarts is a unique feature of Common Lisp that I have not seen elsewhere. It allows to handle conditions wihtout unwinding the stack. If not handled in code the runtime will drop you into the debugger with restart options where the user can choose an available way to continue. Let's make a very simple example to show how it works:

  #+BEGIN_SRC lisp
    (define-condition my-err1 () ())
    (define-condition my-err2 () ())
    (define-condition my-err3 () ())
    (define-condition my-err4 () ())

    (defun lower (err-cond)
      (restart-case
          (error err-cond)
        (restart-case1 (&optional arg)
          (format t "restart-case1 arg:~a~%" arg))
        (restart-case2 (&optional arg)
          (format t "restart-case2 arg:~a~%" arg))
        (restart-case3 (&optional arg)
          (format t "restart-case3 arg:~a~%" arg))))

    (defun higher ()
      (handler-bind
          ((my-err1 (lambda (c)
                      (format t "condition: ~a~%" c)
                      (invoke-restart 'restart-case1 "foo1")))
           (my-err2 (lambda (c)
                      (format t "condition: ~a~%" c)
                      (invoke-restart 'restart-case2 "foo2")))
           (my-err3 (lambda (c)
                      (format t "condition: ~a~%" c)
                      (invoke-restart 'restart-case3 "foo3"))))
        (lower 'my-err1)
        (lower 'my-err2)
        (lower 'my-err3)
        (lower 'my-err4)))
  #+END_SRC

  In the example =HIGHER= calls =LOWER=. =LOWER= immediately raises a condition with =ERROR=. You'd normally of course have some other code here that would raise the conditions instead. To allow the setup of restarts one uses =RESTART-CASE=. This actually looks very similar to a =HANDLER-CASE=. The restart cases can take arguments that can be passed in from a calling module. In our case here the restarts cases just dump a string to stdout.
  The magic in =HIGHER= to actually 'invoke' the restart targets is achieved with =HANDLER-BIND=. We can differenciate on the condition for which restart we want to invoke. The restart cases are invoked with =INVOKE-RESTART=. This allows to also pass the argument to the restart case handler. If a condition handler is not bound the condition will bubble further up the call chain. So it's possible to bind condition handlers on an even more higher level where one possibly has more oversight to decide which restart to use.
  Executing =HIGHER= will give the folling output:

  #+BEGIN_SRC
CL-USER> (higher)
condition: Condition #<MY-ERR1 #x302001398D9D>
restart-case1 arg:foo1
condition: Condition #<MY-ERR2 #x30200139886D>
restart-case2 arg:foo2
condition: Condition #<MY-ERR3 #x30200139833D>
restart-case3 arg:foo3
  #+END_SRC

  This output is from calling =LOWER= function with condition types =MY-ERR1=, =MY-ERR2= and =MY-ERR3=. When we now call =LOWER= with =MY-ERR4= we will be dropped into the debugger, because there is no condition handler for =MY-ERR4=. But in this case that's exactly what we want. The debugger now offers the three restarts we have set up (plus some standard ones). So we see:

  #+BEGIN_SRC
Condition #<MY-ERR4 #x302001445A7D>
   [Condition of type MY-ERR4]

Restarts:
 0: [RESTART-CASE1] #<RESTART RESTART-CASE1 #x251B7B8D>
 1: [RESTART-CASE2] #<RESTART RESTART-CASE2 #x251B7BDD>
 2: [RESTART-CASE3] #<RESTART RESTART-CASE3 #x251B7C2D>
 3: [RETRY] Retry SLY mREPL evaluation request.
 4: [*ABORT] Return to SLY's top level.
 5: [ABORT-BREAK] Reset this thread
 --more--

Backtrace:
 0: (LOWER MY-ERR4)
 1: (HIGHER)
 2: (CCL::CALL-CHECK-REGS HIGHER)
 3: (CCL::CHEAP-EVAL (HIGHER))
 4: ((:INTERNAL SLYNK-MREPL::MREPL-EVAL-1))
 --more--
  #+END_SRC

  We could now choose one of our restarts manually to have the program continue in a controlled way by maybe retrying some operation with a different set of parameters.

* CLOS
  CLOS (Common Lisp Object System) is an object oriented class system or framework in Common Lisp. It has a separate name, but it is part of the Common Lisp standard and part of every Common Lisp runtime. In very basic terms it allows to define classes using =DEFCLASS=. CLOS supports multi-inheritance. The behavior of classes, if something like that exists in Common Lisp - I'd say it doesn't, classes are structures keeping state but don't have behavior as such (and that's a good thing). The behavior to classes is added with generic functions. There is some default behavior to classes, like =INITIALIZE-INSTANCE=, or =PRINT-OBJECT=, etc. which is behavior defined as generic functions. This default behavior of classes is defined by *meta-classes*, classes that define classes. A pretty powerful thing. This would allow me to create my own base class behavior. Comparing this to Java one could very remotely say that this is like creating a new =Object= class that behaves different than the default =Object= class.
Generic functions allow to be overridden. This is driven by providing method (=DEFMETHOD=) definitions which define a certain concrete object types as parameters. Say I have a class Person and have a method definition that works on that class. To override this method I'd have to define a method that works on, say Employee, a subclass ob Person. Then it's possible to also call the implementation of the super class using =CALL-NEXT-METHOD=. Though overriding behavior like that is something that one tries to avoid these days. Composition over inheritance is popular. Not without reason. Those very deep inheritance graphs are considered problematic for a few reasons. One is that it's harder to reason about the methods and what they do. The other problem ist that inheritance has higher coupling than composition.

* Multi dispatch

* REPL interactivity
** quicklisp
** runtime changes

* Runtimes/compilers (CCL, SBCL, ECL, ABCL | LispWorks, Allegro)

* Debugging
** REPL driven development
** trace, …

* Image based
** manipulating data in image
** image snapshot
** load from image

* Functional programming
** blog entry about functional programming
